<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fabric.js お絵かきアプリ</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.0/fabric.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Zen+Maru+Gothic&family=Zen+Kurenaido&family=M+PLUS+1p&family=Noto+Sans+JP&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Zen Maru Gothic', sans-serif; text-align: center; }
        canvas { border: 1px solid black; display: block; margin: auto; }
        .toolbar { display: flex; justify-content: center; gap: 10px; margin-bottom: 10px; }
        .toolbar button { padding: 10px; font-size: 20px; cursor: pointer; border: none; background-color: #f0f0f0; }
        .toolbar button.active { background-color: #ddd; }
        .controls { margin-bottom: 10px; }
        .hidden { display: none; }
        #deleteButton, #layerControls, #opacityControl { display: none; margin-top: 10px; }
        img { width: 25px; }
    </style>
</head>
<body>

    <h2>Fabric.js お絵かき＆文字挿入アプリ</h2>

    <div class="toolbar">
        <button id="mouseButton" onclick="setTool('mouse')" title="選択"><img src="https://img.icons8.com/?size=100&id=11648&format=png&color=000000"></button>
        <button id="penButton" onclick="setTool('pen')" title="ペン"><img src="https://img.icons8.com/?size=100&id=kzbuWFKT4NSp&format=png&color=000000"></button>
        <button id="textButton" onclick="setTool('text')" title="文字"><img src="https://img.icons8.com/?size=100&id=99489&format=png&color=000000"></button>
        <button id="imageButton" onclick="document.getElementById('imageUpload').click()" title="画像"><img src="https://img.icons8.com/?size=100&id=53386&format=png&color=000000"></button>
    </div>

    <input type="file" id="imageUpload" accept="image/*" class="hidden">

    <div class="controls">
        <div id="penControls" class="hidden">
            <label>色: <input type="color" id="penColor" value="#000000"></label>
            <label>太さ: <input type="range" id="penWidth" min="1" max="50" value="3"></label>
        </div>

        <div id="textControls" class="hidden">
            <input type="text" id="textInput" placeholder="文字を入力">
            <label>フォント:
                <select id="fontFamily">
                    <option value="Zen Maru Gothic">Zen Maru Gothic</option>
                    <option value="Zen Kurenaido">Zen Kurenaido</option>
                    <option value="M PLUS 1p">M PLUS 1p</option>
                  <option value="Noto Sans JP">Noto Sans JP</option>
                    <option value="Arial">Arial</option>
                </select>
            </label>
            <label>サイズ: <input type="number" id="fontSize" min="10" max="100" value="30"></label>
            <label>色: <input type="color" id="fontColor" value="#000000"></label>
            <button onclick="addText()">文字追加</button>
        </div>

        <button onclick="clearCanvas()">クリア</button>
        <button onclick="saveCanvas()">画像保存</button>

        <div id="layerControls">
            <button onclick="moveForward()">🔼前面へ</button>
            <button onclick="moveBackward()">🔽背面へ</button>
        </div>

        <div id="opacityControl">
            <label>透明度: <input type="range" id="opacitySlider" min="0" max="1" step="0.1" value="1"></label>
        </div>

        <div id="deleteButton">
            <button onclick="deleteSelectedObject()">削除する 🗑️</button>
        </div>
    </div>

    <canvas id="canvas" width="500" height="500"></canvas>

    <script>
        const canvas = new fabric.Canvas('canvas');
        let undoStack = [], redoStack = [];

        function saveState() {
            undoStack.push(JSON.stringify(canvas));
            redoStack = [];
        }

        function setTool(tool) {
            canvas.isDrawingMode = (tool === 'pen');
            document.querySelectorAll('.controls > div').forEach(div => div.classList.add('hidden'));
            document.getElementById(tool + "Controls")?.classList.remove('hidden');
        }

        document.getElementById('penColor').addEventListener('input', function() {
            canvas.freeDrawingBrush.color = this.value;
        });

        document.getElementById('penWidth').addEventListener('input', function() {
            canvas.freeDrawingBrush.width = parseInt(this.value, 10);
        });

        function addText() {
            let text = document.getElementById('textInput').value;
            if (!text) return;
            let textObj = new fabric.Text(text, {
                left: 100, top: 100,
                fontFamily: document.getElementById('fontFamily').value,
                fontSize: parseInt(document.getElementById('fontSize').value, 10),
                fill: document.getElementById('fontColor').value
            });
            canvas.add(textObj);
            saveState();
        }

        function clearCanvas() {
            canvas.clear();
            saveState();
        }

        function saveCanvas() {
          const link = document.createElement('a');
          link.download = 'image.png';
          link.href = canvas.toDataURL({ format: 'png' });
          link.target = 'blank';
          link.click();
        }

        document.getElementById('imageUpload').addEventListener('change', function(event) {
            let reader = new FileReader();
            reader.onload = function(e) {
                fabric.Image.fromURL(e.target.result, function(img) {
                    img.scaleToWidth(200);
                    canvas.add(img);
                    saveState();
                });
            };
            reader.readAsDataURL(event.target.files[0]);
        });

        function deleteSelectedObject() {
            canvas.getActiveObjects().forEach(obj => canvas.remove(obj));
            canvas.discardActiveObject().renderAll();
            saveState();
        }

        function moveForward() { let obj = canvas.getActiveObject(); if (obj) canvas.bringForward(obj); }
        function moveBackward() { let obj = canvas.getActiveObject(); if (obj) canvas.sendBackwards(obj); }

document.getElementById('opacitySlider').addEventListener('input', function() {let obj = canvas.getActiveObject(); if (obj) obj.set({ opacity: parseFloat(this.value) }); canvas.renderAll(); });

canvas.on('selection:created', function() { document.getElementById('deleteButton').style.display = 'block'; document.getElementById('layerControls').style.display = 'block'; document.getElementById('opacityControl').style.display = 'block'; }); canvas.on('selection:cleared', function() { document.getElementById('deleteButton').style.display = 'none'; document.getElementById('layerControls').style.display = 'none'; document.getElementById('opacityControl').style.display = 'none'; });
    </script>

</body>
</html>
